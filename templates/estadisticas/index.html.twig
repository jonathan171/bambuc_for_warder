{% extends 'base.html.twig' %}
{% import "macros/select2.html.twig" as macroselect2 %}

{% block title %}Hello EstadisticasController!{% endblock %}

{% block stylesheets %}
{{ macroselect2.styleSelect2}}
<style>
.select2-container {
    width: 100% !important;
}

.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw !important;
    height: 100vh !important; /* Ocupa toda la altura de la ventana */
    background: white;
    z-index: 9999;
    padding: 10px; /* Opcional: para dar algo de espacio */
}
</style>
{% endblock %}

{% block body %}

<div class="row">
    <div class="col-lg-6 col-md-12 d-flex align-items-stretch">
        <div class="card w-100">
            <div class="card-body">
             <div class="d-flex align-items-center">
                    <div>
                      <h4 class="card-title">Rango de fechas:</h4>
                    </div>
                    <div class="ms-auto">
                      <div class="">
                        <input type="text" id="fechaRango" name="fechaRango" class="form-control"/>
                      </div>
                    </div>
                </div>
             <div id="enviosPorPaisChart" style="width:100%; height:400px;"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-12 d-flex align-items-stretch">
        <div class="card w-100">
            <div class="card-body">
             <div class="d-flex align-items-center">
                    <div>
                      <h4 class="card-title">Rango de fechas:</h4>
                    </div>
                    <div class="ms-auto">
                      <div class="">
                        <input type="text" id="fechaRangoDestino" name="fechaRangoDestino" class="form-control"/>
                      </div>
                    </div>
                </div>
             <div id="enviosPorPaisDestinoChart" style="width:100%; height:400px;"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-12 d-flex align-items-stretch">
        <div class="card w-100">
            <div class="card-body">
             <div class="d-flex align-items-center">
                    <div>
                      <h4 class="card-title">Rango de fechas:</h4>
                    </div>
                    <div class="ms-auto">
                      <div class="">
                        <input type="text" id="fechaPesoPorDia" name="fechaPesoPorDia" class="form-control"/>
                      </div>
                    </div>
            </div>
            <div id="totalesPorDiaChart" style="width:100%; height:400px;"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-12 d-flex align-items-stretch">
        <div class="card w-100">
            <div class="card-body">
             <div class="d-flex align-items-center">
                    <div>
                      <h4 class="card-title">Rango de fechas:</h4>
                    </div>
                    <div class="ms-auto">
                      <div class="">
                        <input type="text" id="fechaPorEmpresa" name="fechaPorEmpresa" class="form-control"/>
                      </div>
                    </div>
            </div>
            <div class="d-flex align-items-center">
                    <div>
                      <h4 class="card-title"><b>Pais:</b></h4>
                    </div>
                    <select class="form-control select2" id="input-buscador-pais"></select>
            </div>
            <div id="rangosDePesoChart" style="width:100%; height:400px;"></div>
            </div>
        </div>
    </div>
</div>


{% endblock %}
{% block javascripts %}
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
{{ macroselect2.scriptSelect2}}
<script>
 $(document).ready(function() {
        const fechaFin = moment();
        const fechaInicio = moment().subtract(3, 'months');
         const fechaFin_rango_pesos = moment();
        const fechaInicio_rango_pesos = moment().subtract(3, 'months');
        // Configurar el daterangepicker
        $('#fechaRango').daterangepicker({
            opens: 'left',
            locale: {
                format: 'YYYY-MM-DD' // Formato de fecha que usaremos
            },
            startDate: fechaInicio,
            endDate: fechaFin,
            ranges: {
                'Últimos 3 meses': [fechaInicio, fechaFin],
                'Últimos 6 meses': [moment().subtract(6, 'months'), fechaFin],
                'Último año': [moment().subtract(1, 'year'), fechaFin],
                'Este año': [moment().startOf('year'), fechaFin]
            }
        }, function(start, end) {
            // Función que se llama cuando el usuario selecciona un rango de fechas
            const fechaInicio = start.format('YYYY-MM-DD');
            const fechaFin = end.format('YYYY-MM-DD');
            cargarGraficoOrigen(fechaInicio, fechaFin);
        });

        function cargarGraficoOrigen(fechaInicio = '', fechaFin = '') {
            $.ajax({
                url: '{{ path('app_estadisticas_envios_por_pais')}}',
                method: 'GET',
                data: { fechaInicio: fechaInicio, fechaFin: fechaFin },
                success: function(data) {
                     const totalGeneral = data.totales.reduce((acc, curr) => acc + curr, 0);
                    Highcharts.chart('enviosPorPaisChart', {
                        chart: {
                            type: 'column'
                        },
                        title: {
                            text: 'Cantidad de envíos por ciudad de origen'
                        },
                        xAxis: {
                            categories: data.labels,
                            title: {
                                text: 'Ciudades'
                            }
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Cantidad de envíos'
                            }
                        },
                        tooltip: {
                               formatter: function() {
                                        return `
                                            <b>${this.point.category}</b><br>
                                            <b>${this.point.y} envíos</b><br>
                                            Total a cobrar: <b>${Highcharts.numberFormat(this.point.totalCobrar, 2, '.', ',')} COP</b>
                                        `;
                                    }
                            },
                        plotOptions: {
                            column: {
                                dataLabels: {
                                    enabled: true,
                                    formatter: function() {
                                        const porcentaje = ((this.y / totalGeneral) * 100).toFixed(2);
                                        return `${porcentaje}%`; // Mostrar porcentaje encima de cada barra
                                    },
                                    style: {
                                        fontWeight: 'bold',
                                        color: 'black'
                                    }
                                }
                            }
                        },
                        series: [{
                            name: 'Envíos',
                            data: data.totales.map((total, index) => ({
                            y: total,
                            totalCobrar: data.totalesCobrar[index]
                        })),
                        color: 'rgba(128, 0, 128, 0.8)'
                            }]
                    });
                },
                error: function(error) {
                    console.error("Error al cargar los datos de envíos por ciudad:", error);
                }
            });
        }


        //grafico destino
         $('#fechaRangoDestino').daterangepicker({
            opens: 'left',
            locale: {
                format: 'YYYY-MM-DD' // Formato de fecha que usaremos
            },
            startDate: fechaInicio,
            endDate: fechaFin,
            ranges: {
                'Últimos 3 meses': [fechaInicio, fechaFin],
                'Últimos 6 meses': [moment().subtract(6, 'months'), fechaFin],
                'Último año': [moment().subtract(1, 'year'), fechaFin],
                'Este año': [moment().startOf('year'), fechaFin]
            }
        }, function(start, end) {
            // Función que se llama cuando el usuario selecciona un rango de fechas
            const fechaInicio = start.format('YYYY-MM-DD');
            const fechaFin = end.format('YYYY-MM-DD');
            cargarGraficoDestino(fechaInicio, fechaFin);
        });

        function cargarGraficoDestino(fechaInicio = '', fechaFin = '') {
            $.ajax({
                url: '{{ path('app_estadisticas_envios_por_pais_destino')}}',
                method: 'GET',
                data: { fechaInicio: fechaInicio, fechaFin: fechaFin },
                success: function(data) {
                    const totalGeneral = data.totales.reduce((acc, curr) => acc + curr, 0);
                    Highcharts.chart('enviosPorPaisDestinoChart', {
                        chart: {
                            type: 'column'
                        },
                        title: {
                            text: 'Cantidad de envíos por país de destino'
                        },
                        xAxis: {
                            categories: data.labels,
                            title: {
                                text: 'Países'
                            },
                            labels: {
                                rotation: -45, // Gira las etiquetas para evitar solapamientos
                                step: 1, // Asegura que todas las etiquetas se muestren
                                style: {
                                    fontSize: '10px'
                                }
                            }
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Cantidad de envíos'
                            }
                        },
                        tooltip: {
                                formatter: function() {
                                        return `
                                            <b>${this.point.category}</b><br>
                                            <b>${this.point.y} envíos</b><br>
                                            Total a cobrar: <b>${Highcharts.numberFormat(this.point.totalCobrar, 2, '.', ',')} COP</b>
                                        `;
                                    }
                            },
                        plotOptions: {
                            column: {
                                dataLabels: {
                                    enabled: true,
                                    formatter: function() {
                                        const porcentaje = ((this.y / totalGeneral) * 100).toFixed(2);
                                        return `${porcentaje}%`; // Mostrar porcentaje encima de cada barra
                                    },
                                    style: {
                                        fontWeight: 'bold',
                                        color: 'black'
                                    }
                                }
                            }
                        },
                        series: [{
                            name: 'Envíos',
                            data: data.totales.map((total, index) => ({
                            y: total,
                            totalCobrar: data.totalesCobrar[index]
                        })),
                            color: 'rgba(75, 12, 192, 0.8)' 
                        }]
                    });
                },
                error: function(error) {
                    console.error("Error al cargar los datos de envíos por país de destino:", error);
                }
            });
        }

         $('#fechaPesoPorDia').daterangepicker({
            opens: 'left',
            locale: {
                format: 'YYYY-MM-DD' // Formato de fecha que usaremos
            },
            startDate: fechaInicio,
            endDate: fechaFin,
            ranges: {
                'Últimos 3 meses': [fechaInicio, fechaFin],
                'Últimos 6 meses': [moment().subtract(6, 'months'), fechaFin],
                'Último año': [moment().subtract(1, 'year'), fechaFin],
                'Este año': [moment().startOf('year'), fechaFin]
            }
        }, function(start, end) {
            const fechaInicio = start.format('YYYY-MM-DD');
            const fechaFin = end.format('YYYY-MM-DD');
            
            cargarGraficoTotalesPorDia(fechaInicio, fechaFin);
        });

        
        function cargarGraficoTotalesPorDia(fechaInicio = '', fechaFin = '') {
            // Calcular la diferencia de días entre las fechas
            const diffInDays = moment(fechaFin).diff(moment(fechaInicio), 'days');
            let agrupacion = 'daily';

            if (diffInDays > 30 && diffInDays <= 90) {
                agrupacion = 'weekly';
            } else if (diffInDays > 90) {
                agrupacion = 'monthly';
            }

            $.ajax({
                url: '{{ path('app_estadisticas_peso_total_por_dia')}}',
                method: 'GET',
                data: { fechaInicio: fechaInicio, fechaFin: fechaFin, agrupacion: agrupacion },
                success: function(data) {
                    Highcharts.chart('totalesPorDiaChart', {
                        chart: { type: 'line' },
                        title: { text: 'Total de ingresos por fecha' },
                        xAxis: { categories: data.labels, title: { text: 'Fecha' }},
                        yAxis: {
                            min: 0,
                            title: { text: 'Total ($)' }
                        },
                        tooltip: {
                            formatter: function() {
                                const index = this.points ? this.points[0].point.index : this.point.index;
                                const totalFacturado = data.totalesFacturado[index];
                                const totalRecibo = data.totalesRecibo[index];
                                const totalSinCobrar = data.totalesSinCobrar[index];
                                return `
                                    <b>${this.x}</b><br>
                                    Total: <b>$${Highcharts.numberFormat(this.y, 2, '.', ',')} COP</b><br>
                                    Total en Facturas: <b>$${Highcharts.numberFormat(totalFacturado, 2, '.', ',')} COP</b><br>
                                    Total en Recibos: <b>$${Highcharts.numberFormat(totalRecibo, 2, '.', ',')} COP</b><br>
                                    Total sin Cobrar: <b>$${Highcharts.numberFormat(totalSinCobrar, 2, '.', ',')} COP</b>
                                `;
                            },
                            shared: true
                        },
                        series: [{
                            name: 'Total de Ingresos',
                            data: data.totales,
                            color: 'rgba(54, 162, 235, 0.8)'
                        }]
                    });
                },
                error: function(error) {
                    console.error("Error al cargar los datos de totales por día:", error);
                }
            });
        }
        
        $('#fechaPorEmpresa').daterangepicker({
            opens: 'left',
            locale: {
                format: 'YYYY-MM-DD' // Formato de fecha que usaremos
            },
            startDate: fechaInicio,
            endDate: fechaFin,
            ranges: {
                'Últimos 3 meses': [fechaInicio, fechaFin],
                'Últimos 6 meses': [moment().subtract(6, 'months'), fechaFin],
                'Último año': [moment().subtract(1, 'year'), fechaFin],
                'Este año': [moment().startOf('year'), fechaFin]
            }
        }, function(start, end) {
            // Función que se llama cuando el usuario selecciona un rango de fechas
            const fechaInicio_rango_pesos = start.format('YYYY-MM-DD');
            const fechaFin_rango_pesos = end.format('YYYY-MM-DD');
            const pais = $("#input-buscador-pais").val();
            cargarGraficoRangosDePeso(fechaInicio, fechaFin,  pais);
        });
        function cargarGraficoRangosDePeso(fechaInicio = '', fechaFin = '', paisDestino = '') {
            $.ajax({
                url: '{{ path('app_estadisticas_envios_rangos_de_peso')}}',
                method: 'GET',
                data: { fechaInicio: fechaInicio, fechaFin: fechaFin, paisDestino: paisDestino },
                success: function(data) {
                    const rangoMap = {
                        '0 <= 5': 'rango_0_5',
                        '5 <= 10': 'rango_5_10',
                        '10 <= 20': 'rango_10_20',
                        '20 <= 30': 'rango_20_30',
                        '30 <= 40': 'rango_30_40',
                        '40 <= 50': 'rango_40_50',
                        'Más de 50': 'rango_mas_50'
                    };

                    Highcharts.chart('rangosDePesoChart', {
                        chart: { type: 'pie' },
                        title: { text: 'Distribución de Envíos por Rangos de Peso' },
                        tooltip: {
                            formatter: function() {
                                const rangoKey = this.point.name;
                                const top3 = data.top3[rangoKey];
                                const top3Html = top3
                                    ? Object.entries(top3)
                                        .map(([peso, conteo]) => `<br>- ${peso}kg: ${conteo} envíos`)
                                        .join('')
                                    : '<br>- Sin datos';

                                return `
                                    <b>${this.point.name}</b><br>
                                    Envíos: <b>${this.point.y}</b> (${this.point.percentage.toFixed(1)}%)<br>
                                    <b>Top 3 Pesos:</b>${top3Html}
                                `;
                            }
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                cursor: 'pointer',
                                dataLabels: {
                                    enabled: true,
                                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                                }
                            }
                        },
                        series: [{
                            name: 'Envíos',
                            colorByPoint: true,
                            data: data.labels.map((label, index) => ({
                                name: label,
                                y: data.data[index]
                            }))
                        }]
                    });
                },
                error: function(error) {
                    console.error("Error al cargar los datos de los rangos de peso:", error);
                }
            });
        }
        // Cargar gráfico sin filtros al cargar la página
        cargarGraficoOrigen(fechaInicio.format('YYYY-MM-DD'), fechaFin.format('YYYY-MM-DD'));
        cargarGraficoDestino(fechaInicio.format('YYYY-MM-DD'), fechaFin.format('YYYY-MM-DD'));
       cargarGraficoRangosDePeso(fechaInicio.format('YYYY-MM-DD'), fechaFin.format('YYYY-MM-DD'), null);
        cargarGraficoTotalesPorDia(fechaInicio.format('YYYY-MM-DD'), fechaFin.format('YYYY-MM-DD'));
        
        function pad(n, width, z) { z = z || '0'; n = n + ''; return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n; }

     function formatResult (item) {
            

            var html = [
                '<div>',
                    item.text ,
                '</div>'
            ];

            var $state = $(html.join(""));

            return $state;
        };
    

       var currentQuery = "";

        $("#input-buscador-pais").select2({
            width: '100%',
             theme: "bootstrap5",
             minimumInputLength: 2,
             delay: 200,
             placeholder: "Ingrese un término de búsqueda aquí ",
            ajax: {
                url: '{{ path('app_pais_buscador_ajax_pais')}}',
                dataType: 'json'
            },
            templateResult: formatResult
        }).on('select2:select', function (e) {
            var data = e.params.data;
             cargarGraficoRangosDePeso(fechaInicio_rango_pesos.format('YYYY-MM-DD'), fechaFin_rango_pesos.format('YYYY-MM-DD'), data.id);
            
        }).on('select2:open', function() {
            $('.select2-search input').focus().val(currentQuery).trigger('input');
        }).on('select2:closing', function() {
            currentQuery = $('.select2-search input').prop('value');
        });


        /**full pantalla
        */
        const chartContainer = $('#enviosPorPaisChart');

        chartContainer.on('dblclick', function () {
            // Alternar la clase fullscreen
            $(this).toggleClass('fullscreen');

            // Redibujar el gráfico para ajustarlo al nuevo tamaño
            if ($(this).hasClass('fullscreen')) {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'enviosPorPaisChart') {
                        chart.setSize(null, null); // Ajusta al contenedor
                    }
                });
            } else {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'enviosPorPaisChart') {
                        chart.setSize(null, 400); // Vuelve al tamaño original
                    }
                });
            }
        });

        /**full pantalla
        */
        const chartContainer2 = $('#enviosPorPaisDestinoChart');

        chartContainer2.on('dblclick', function () {
            // Alternar la clase fullscreen
            $(this).toggleClass('fullscreen');

            // Redibujar el gráfico para ajustarlo al nuevo tamaño
            if ($(this).hasClass('fullscreen')) {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'enviosPorPaisDestinoChart') {
                        chart.setSize(null, null); // Ajusta al contenedor
                    }
                });
            } else {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'enviosPorPaisDestinoChart') {
                        chart.setSize(null, 400); // Vuelve al tamaño original
                    }
                });
            }
        });

         /**full pantalla
        */
        const chartContainer3 = $('#totalesPorDiaChart');

        chartContainer3.on('dblclick', function () {
            // Alternar la clase fullscreen
            $(this).toggleClass('fullscreen');

            // Redibujar el gráfico para ajustarlo al nuevo tamaño
            if ($(this).hasClass('fullscreen')) {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'totalesPorDiaChart') {
                        chart.setSize(null, null); // Ajusta al contenedor
                    }
                });
            } else {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'totalesPorDiaChart') {
                        chart.setSize(null, 400); // Vuelve al tamaño original
                    }
                });
            }
        });
         /**full pantalla
        */
        const chartContainer4 = $('#rangosDePesoChart');

        chartContainer4.on('dblclick', function () {
            // Alternar la clase fullscreen
            $(this).toggleClass('fullscreen');

            // Redibujar el gráfico para ajustarlo al nuevo tamaño
            if ($(this).hasClass('fullscreen')) {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'rangosDePesoChart') {
                        chart.setSize(null, null); // Ajusta al contenedor
                    }
                });
            } else {
                Highcharts.charts.forEach(chart => {
                    if (chart && chart.renderTo.id === 'rangosDePesoChart') {
                        chart.setSize(null, 400); // Vuelve al tamaño original
                    }
                });
            }
        });
    });


     
    
     
</script>
{% endblock %}